#!/bin/bash

# GLOBAL SETTINGS
YES=0
NO=1
SUCCESS=0
FAIL=1
REBOOT_REQUIRED=$NO
REBOOT_MSG="Rebooting Required."


# FUNCTIONS
die() {
  echo "ERROR $*" >&2
  kill 0
  exit 99
}


assert_racadm() {
  # try 1
  RACADM=$(which racadm)
  [[ ${#RACADM} -gt 1 ]] && return
  # try 2
  [[ -x /opt/dell/srvadmin/bin/idracadm7 ]] \
  && RACADM=/opt/dell/srvadmin/bin/idracadm7
  [[ ${#RACADM} -gt 1 ]] || die "racadm not found"
}


get_boot_mode() {
  $RACADM get bios.biosbootsettings.bootmode \
  | awk -F '=' '/^bootmode/ { printf "%s\n", tolower($2) }'
}


set_uefi_boot_mode() {
  local _bootmode=$( get_boot_mode )
  echo "Bootmode is '$_bootmode'"
  case "$_bootmode" in
    uefi)
      : #pass
      ;;
    bios)
      echo "Attempting to set UEFI bootmode."
      set -x
      $RACADM set bios.biosbootsettings.bootmode Uefi
      set +x
      REBOOT_REQUIRED=$YES
      REBOOT_MSG="IMPORTANT:
        USB enablement requires UEFI boot mode.
        Follow the instructions below to apply the change to boot in uefi mode.
        After the reboot completes, run this script again to enable USB boot option."
      ;;
    *)
      die "boot mode: '$_bootmode' is not supported."
      ;;
  esac
}


is_usb_boot_enabled() {
  local _linecount=$(
    $RACADM get bios.biosbootsettings.GenericUsbBoot \
    | grep -F 'GenericUsbBoot' \
    | grep -F 'Enabled' \
    | wc -l
  )
  [[ $_linecount -eq 1 ]] && return $YES || return $NO
}


enable_usb_boot() {
  echo "Checking if USB boot is enabled ..."
  if is_usb_boot_enabled ; then
    echo "USB boot is already enabled."
  else
    echo "USB boot is NOT enabled."
    echo "Attempting to enable USB boot."
    set -x
    $RACADM set bios.biosbootsettings.GenericUsbBoot Enabled
    set +x
    REBOOT_REQUIRED=$YES
    REBOOT_MSG="
      IMPORTANT:
        USB enablement requires TWO system reboots.
        Follow the instructions below to apply the first set of changes and reboot.
        After the reboot completes, run this script again to set proper boot sequence."
  fi
}

get_uefi_boot_order() {
  $RACADM get bios.biosbootsettings.UefiBootSeq \
  | awk -F '=' '/^UefiBootSeq/ { printf "%s\n", $2 }'
}


set_usb_as_first_boot_option() {
  local _old=$( get_uefi_boot_order )
  local _old_parts=( $( echo "$_old" | tr ',' ' ' ) )

  echo "Uefi boot sequence is '$_old'"

  # if USB is the first boot item, then nothing to do
  if [[ "${_old_parts[0]}" == *USB* ]] ; then
    echo "USB boot is already first. Nothing to do."
    return $SUCCESS
  fi

  # Find the USB boot entry and make it the first one
  for elem in "${_old_parts[@]}"; do
    if [[ "$elem" == *USB* ]] ; then
      echo "Setting USB boot as first boot option ..."
      set -x
      $RACADM set bios.biosbootsettings.SetBootOrderFqdd1 "$elem"
      set +x
      REBOOT_REQUIRED=$YES
      REBOOT_MSG="Set usb as first boot option"
      break
    fi
  done
}


apply_changes() {
  [[ $REBOOT_REQUIRED -eq $NO ]] && return 0
  $RACADM get bios.biosbootsettings
  cat <<ENDHERE
Next Steps:
  1. Check bios boot settings ...
     racadm get bios.biosbootsettings
  2. Apply settings ...
     racadm jobqueue create BIOS.Setup.1-1 -r pwrcycle -s TIME_NOW
     (this should cause the OS to reboot)
  3. If node did not reboot on it's own, manually reboot the OS or cycle power.
     Can also try:
     racadm jobqueue create BIOS.Setup.1-1 -r graceful -s TIME_NOW
  4. OPTIONAL - delete completed jobqueue tasks ...
     racadm jobqueue view
     racadm jobqueue delete --all
ENDHERE

  echo
  echo "Rebooting in 10 seconds..."
  sleep 10
  echo "... rebooting NOW"
  $RACADM jobqueue create BIOS.Setup.1-1 -r pwrcycle -s TIME_NOW
}


# DO WORK
assert_racadm

set_uefi_boot_mode \
&& apply_changes

enable_usb_boot \
&& apply_changes

set_usb_as_first_boot_option \
&& apply_changes
